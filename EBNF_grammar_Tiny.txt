<TinyProgramNode> ::= <MainFunctionNode> | <MainFunctionNode> { <FunctionNode> }

<MainFunctionNode> ::= <MainName> <MainType> <L_Paren> <R_Paren> <L_Brace> <DeclarationNode> <BlockNode> <R_Brace>

<FunctionNode> ::= <TokenTypes> <IdentifierNames> <L_Paren> <ParametersList> <R_Paren> <L_Brace> <DeclarationNode> <BlockNode> <ReturnNode> <R_Brace>

<FunctionCallNode> ::= <IdentifierNames> <L_Paren> [ ParametersListCall ] <R_Paren> <Semicolon>

<CommentSkip> ::= "/""/" [ <Character> { <Character> } ]

<ReturnNode> ::= "return" <ReturnValue>  // <ReturnValue> type must be equal to <TokenTypes> of function

<TokenTypes> ::= "int" | "float" | "char" | "bool"

<DeclarationNode> ::= { <Declaration> }

<Declaration> ::= <TokenTypes> <IdentifierNames> <Assignment> <expression> <Semicolon>

<ParametersList> ::= [ <TokenTypes> <IdentifierNames> { "," <TokenTypes> <IdentifierNames> } ]

<ParametersListCall> ::= [ <IdentifierNames> { "," <IdentifierNames> } ]

<BlockNode> ::= { <Statement> }

<Statement> ::= <AssignmentNode> | <IfNode> | <WhileNode>

<AssignmentNode> ::= <IdentifierNames> <Assignment> <Expression> <Semicolon> | <IdentifierNames> "[" <IntValues> "] <Assignment> <Expression> <Semicolon>

<IfNode> ::= <ifToken> <L_Paren> <Condition> <R_Paren> <L_Brace> <BlockNode> <R_Brace> <elseToken> <L_Brace> <BlockNode> <R_Brace>

<WhileNode> ::= <whileToken> <L_Paren> <Condition> <R_Paren> <L_Brace> <BlockNode> <R_Brace>

<Condition> ::= <Expression> <LogicalOperation> <Expression>

<LogicalOperation> ::= "&&" | "||" | "!" | "==" | "!=" | "<" | ">" | "<=" | ">="

<Expression> ::= <Term> { <AddOperation> <Term> }

<Term> ::= <Factor> { <MultiOperation> <Factor> }

<Factor> ::= <IdentifierNames> | <Numbers> | <CharValues> | "(" <Expression> ")"

<AddOperation> ::= "+" | "-"

<MultiOperation> ::= "*" | "/" | "%"

<IdentifierNames> ::= <Character> { (<Character> | <IntValues>) }

<Numbers> ::= <IntValues> | <FloatValues>

<ReturnValue> ::= <IntValues> | <FloatValues> | <CharValues>  | <BoolValues> | <IdentifierNames>

<IntValues> ::= <Digits> { <Digits> }  // Max is 2^16 as it is unsigned 16 bits

<FloatValues> ::= <Digits> { <Digits> }  [ "." <Digits> { <Digits> } ] // Max is 2^32 as it is unsigned 32 bits

<BoolValues> ::= "true" | "false"

<CharValues> ::= "'" <Character> "'"

<Digits> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<Character> :: "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"

<Array> ::= <TokenTypes> <IdentifierNames> "[" <IntValues> "]

<MainName> ::= "main"

<MainType> ::= "int"

<L_Paren> ::= "("

<R_Paren> ::= ")"

<L_Brace> ::= "{"

<R_Brace> ::= "}"

<Assignment> ::= "="

<Semicolon> ::= ";"

<ifToken> ::= "if"

<elseToken> ::= "else"

<whileToken> ::= "while"

