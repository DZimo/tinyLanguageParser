<tinyProgramNode> ::= <MainFunctionNode> | <MainFunctionNode> { <function> }

<MainFunctionNode> ::= <MainName> <MainType> <L_Paren> <R_Paren> <L_Brace> <DeclarationNode> <BlockNode> <R_Brace>

<FunctionNode> ::= <TokenTypes> <IdentifierNames> <L_Paren> <ParametersList> <R_Paren> <L_Brace> <DeclarationNode> <BlockNode> <ReturnFunction> <R_Brace>

<ReturnNode> ::= "return" <ReturnValue>  // <ReturnValue> type must be equal to <TokenTypes> of function

<TokenTypes> ::= "int" | "float" | "char" | "bool"

<DeclarationNode> ::= { <Declaration> }

<Declaration> ::= <TokenTypes> <IdentifierNames> <Assignment> <expression> <Semicolon>

<ParametersList> ::= [ <TokenTypes> <IdentifierNames> { "," <TokenTypes> <IdentifierNames> } ]

<BlockNode> ::= { <Statement> }

<Statement> ::= <AssignmentNode> | <IfNode> | <WhileNode>

<AssignmentNode> ::= <IdentifierNames> <Assignment> <Expression> <Semicolon> | <IdentifierNames> "[" <IntValues> "] <Assignment> <Expression> <Semicolon>

<IfNode> ::= <ifToken> <L_Paren> <Condition> <R_Paren> <L_Brace> <BlockNode> <R_Brace> <elseToken> <L_Brace> <BlockNode> <R_Brace>

<WhileNode> ::= <whileToken> <L_Paren> <Condition> <R_Paren> <L_Brace> <BlockNode> <R_Brace>

<Condition> ::= <Expression> <LogicalOperation> <Expression>

<LogicalOperation> ::= "&&" | "||" | "!" | "==" | "!=" | "<" | ">" | "<=" | ">="

<Expression> ::= <Term> { <AddOperation> <Term> }

<Term> ::= <Factor> { <MultiOperation> <Factor> }

<Factor> ::= <IdentifierNames> | <Numbers> | <CharValues> | "(" <Expression> ")"

<AddOperation> ::= "+" | "-"

<MultiOperation> ::= "*" | "/" | "%"

<IdentifierNames> ::= [a-zA-Z_][a-zA-Z0-9_]*

<Numbers> ::= <IntValues> | <FloatValues>

<ReturnValue> ::= <IntValues> | <FloatValues> | <CharValues>  | <BoolValues> | <IdentifierNames>

<IntValues> ::= [0-9]{1,5}  // Max is 2^16 as it is unsigned 16 bits

<FloatValues> ::= [0-9]{1,10} "." [0-9]{1,10} // Max is 2^32 as it is unsigned 32 bits

<BoolValues> ::= "true" | "false"

<CharValues> ::= "'" <Character> "'"

<Character> ::= [a-zA-Z0-9]  (* This represents an 8-bit character *)

<Array> ::= <TokenTypes> <IdentifierNames> "[" <IntValues> "]

<MainName> ::= "main"

<MainType> ::= "int"

<L_Paren> ::= "("

<R_Paren> ::= ")"

<L_Brace> ::= "{"

<R_Brace> ::= "}"

<Assignment> ::= "="

<Semicolon> ::= ";"

<ifToken> ::= "if"

<elseToken> ::= "else"

<whileToken> ::= "while"

